💻 架構概述（Vue 到 Database）
這是一個典型的前後端分離的應用架構，分為以下幾個部分：

1. Vue（前端）
職責：提供使用者操作介面，負責接收使用者輸入並呈現資料。

舉例：使用者輸入身分證號查詢資料。

2. Route（路由）
職責：將前端的請求路由到對應的 Controller。

舉例：前端傳送查詢請求，Route 會將此請求導向正確的 Controller。

3. Controller（控制器）
職責：處理請求的邏輯分派，將請求傳遞給對應的 Service 處理，並回傳結果。

舉例：接收查詢需求後，交給 Service 處理。

4. Service（服務層）
職責：負責業務邏輯處理，依據需求處理資料，調用 Model。

舉例：驗證使用者輸入格式正確，執行查詢邏輯。

5. Model（資料模型）
職責：處理資料結構定義與資料的封裝，調用 DAO 存取資料庫。

舉例：定義使用者的資料格式（如：姓名、身分證、地址等），準備要查詢的資料。

6. DAO（資料存取物件）
職責：負責執行 SQL 指令與資料庫互動。

舉例：查詢符合身分證號的資料紀錄。

7. Database（資料庫）
職責：儲存所有資料。

舉例：保存所有使用者資料。

🧭 資料流程與處理步驟
① 查詢流程（前往後）
Vue → Route → Controller
使用者在前端輸入資料，透過 Route 傳送請求至 Controller。

Controller → Service → Model
Controller 將請求交給 Service，由 Service 處理業務邏輯，再交由 Model 做資料處理。

Model → DAO → Database
Model 將資料查詢請求交給 DAO，由 DAO 執行 SQL，從 Database 撈資料。

② 資料回傳流程（後往前）
Database → DAO → Model
資料查詢完畢，DAO 將資料回傳 Model。

Model → Service → Controller
Model 將資料回傳給 Service，Service 再回傳給 Controller。

Controller → Route → Vue
Controller 將資料透過 Route 傳回前端 Vue，顯示給使用者。

📦 額外補充：DTO（資料傳輸物件）
用來在層與層之間（例如 Controller 與 Service、Service 與 Model）傳遞資料，避免直接傳原始資料模型。

範例流程：

Route → Controller（使用 DTO 傳入資料）

Controller → Service（轉換或使用 DTO）

Service → Model（DTO 對應欄位轉換為資料模型）

Model → DAO（準備查詢參數）

🧾 對照表：各層功能摘要
層級	功能	責任說明	舉例說明
Vue	使用者介面	顯示資料、接收輸入	輸入身分證號查詢
Route	請求路由	將前端請求導向 Controller	將查詢請求導向 Controller
Controller	控制流程邏輯	分派請求、回應資料	呼叫 Service 處理查詢，回傳資料
Service	業務邏輯處理	處理邏輯、驗證、計算	處理查詢條件、檢查輸入格式
Model	資料模型處理	資料格式定義與封裝	封裝查詢條件
DAO	資料庫操作	執行 SQL 操作與資料庫互動	撈取資料庫資料
Database	實體資料庫	儲存資料	儲存使用者紀錄