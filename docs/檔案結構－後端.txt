src/
├──📁connection/				【資料庫連線設定（config / pool）】
│   ├── _index.js					⚙️ 自動選擇連接資料庫
│   ├── alwaysdataConfig.js				
│   ├── azureConfig.js				
│   └── railwayConfig.js				
│   
│   
├──📁main/						【main主體：前端到資料庫的完整流程】
│   ├──📁controller/				◎ Controller 中介層：負責前端與後端間資料轉換
│   │   ├── captchaController.js
│   │   ├── loginController.js
│   │   ├── registerCheckController.js
│   │   └── registerController.js
│   │
│   ├──📁dao/						◎ DAO 連結層(後端 <=> 資料庫)：對資料庫下指令
│   │   ├── loginDAO.js            	
│   │   ├── registerCheckDAO.js            	
│   │   └── registerDAO.js            	
│   │           	
│   ├──📁dto/						◎ DTO 資料格式模板：「資料格式模板」，用來讓 controller 與 model 之間交換資料更安全、清晰、可測。
│   │   ├── loginDTO.js            	
│   │   └── registerDTO.js            	
│   │           	
│   ├──📁model/						◎ model 中介層：負責資料庫與後端間資料轉換
│   │   ├── loginModel.js         	
│   │   ├── registerCheckModel.js         	
│   │   └── registerModel.js         	
│   │
│   ├──📁route/						◎ route 連結層：負責定義 API 呼叫路由規則
│   │   ├── captchaRoute.js				🔗 GET、POST
│   │   ├── loginRoute.js				🔗 POST
│   │   ├── registerCheckRoute.js		🔗 GET
│   │   └── registerRoute.js			🔗 POST
│   │
│   └──📁service/					◎ service 邏輯層：主要的API功能位置
│   	├── captchaService.js			📄產生驗證碼圖片與驗證碼文字
│   	├── gmailService.js				📄寄mail
│   	├── loginService.js				
│   	├── registerCheckService.js				
│   	└── registerService.js			
│             	
│             	
├──📁middlewares/				【抽離 index.js 的 Express 設定檔案】
│   ├── cors.js
│   ├── security.js
│   └── session.js
│   
│   
└──📁routes/					【路由層：負責定義 API 路由規則，轉發請求到對應 Controller】
    ├── _index.js					⚙️ 載入全部路由
    ├── alwaysdataRoute.js			🔗 GET
    ├── azureRoute.js				🔗 GET
    └── railwayRoute.js				🔗 GET
 
