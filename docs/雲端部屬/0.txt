1. Railway MySQL （資料庫）
危機度	可能原因	預防方法
中低	- 持續開啟資料庫超過免費時數（例：資料庫24小時一直開）	- 適當關閉不使用的資料庫實例
- 不用時暫停專案
- 不要建立過多不必要的資料庫
- 大量資料寫入、讀取造成流量或容量超標	- 優化資料庫查詢和結構
- 避免頻繁重複的無用操作

2. Render Node.js 後端
危機度	可能原因	預防方法
低	- 部署多個後端服務導致實例時數累計超過750小時	- 一個作品只部署一個後端伺服器
- 頻寬用量過高（大量傳送圖片、大檔API回傳）	- 減少回傳資料量
- 靜態檔案使用 CDN
- 避免被攻擊流量
- 頻繁部署，消耗管道分鐘數	- 不頻繁更新部署，確定改動後再部署

3. Vercel Vue2 前端
危機度	可能原因	預防方法
極低	- 非常大量流量（一般作品不太可能）	- 不用特別擔心
- 使用靜態資源 CDN，Vercel 自動優化

總結
服務	危機度	預防重點
Railway MySQL	中低	控制資料庫開啟時間與流量
Render Node.js	低	單一服務、控管頻寬和部署次數
Vercel Vue2	極低	幾乎不用擔心流量限制
