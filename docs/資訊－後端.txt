後端架構流程教學筆記
一、系統架構總覽
後端架構常常依照職責分成多層，每層負責不同的任務，這樣的分層設計有助於維護性、清晰度和彈性。常見的後端架構流程如下：

Vue (前端)

職責：使用者填寫表單，輸入前端格式的資料。

資料角色：前端格式資料

比喻：像是「門外的信件」。

Route (路由)

職責：接收來自前端的請求並引導至相對應的 Controller。

資料角色：前端資料的入口

比喻：像「郵局櫃檯，收取信件並分發」。

Controller (CON)

職責：負責將前端資料與後端資料進行轉換（解包/封包）。

資料角色：前端資料 ? 後端資料

比喻：像「翻譯官，拆信與包信」。

Service (SER)

職責：處理後端的業務邏輯與運算，根據業務需求處理資料。

資料角色：後端格式資料

比喻：像「大腦，決定信件怎麼處理」。

Model (MOD)

職責：負責將後端資料與資料庫資料之間進行格式轉換（封包/解包）。

資料角色：後端資料 ? 資料庫資料

比喻：像「翻譯官，將信件轉成資料庫能讀的格式」。

DAO (Data Access Object)

職責：執行 SQL 操作，與資料庫進行交互。

資料角色：資料庫格式資料

比喻：像「司機，把信送到資料庫」。

Database (DB)

職責：儲存資料。

資料角色：資料庫資料

比喻：像「信箱，存放信件」。

二、簡單流程概述
1. 前端資料流轉到資料庫
1. 前端資料流轉：Vue → Route → Controller
過程描述：
使用者在 Vue 前端應用中填寫表單，並提交資料。這些資料通過 Route 進入 Controller，進行處理。
比喻：這像是使用者寄出信件，信件經過郵局櫃檯（Route）進入接收站（Controller）等待進一步處理。

流程圖：
使用者 → Vue → Route → Controller

2. 後端資料流轉：Controller → Service → Model
過程描述：
Controller 接收到來自前端的資料後，進行資料解包，並將其傳遞給 Service 進行業務邏輯處理。之後，Service 會把資料交給 Model，以便轉換成適合資料庫操作的格式。
比喻：Controller 就像是接收信件的翻譯官，把信件轉換成能理解的內容，交給後端的腦袋（Service）進行決策，再由 Model 轉換成後端需要的格式。

流程圖：
Controller → Service → Model

3. 資料庫操作流轉：Model → DAO → Database
過程描述：
Model 根據需求將資料轉換成資料庫能夠理解的格式，並交給 DAO 執行具體的 SQL 操作，將資料儲存到 Database。
比喻：Model 是將信件翻譯成資料庫語言，DAO 就像司機把資料送到資料庫（Database）存放。

流程圖：
Model → DAO → Database

2. 資料庫回應至前端
1. 資料庫回應：Database → DAO → Model
過程描述：
當資料庫回傳資料時，DAO 撈取資料，並交給 Model 進行資料解包，轉換成後端能理解的格式。
比喻：資料庫就像是寄回信件給 DAO，由 DAO 撈取並交給 Model，再由 Model 轉換為後端能處理的資料格式。

流程圖：
Database → DAO → Model

2. 後端處理與格式轉換：Model → Service → Controller
過程描述：
Model 解包資料後，將其傳遞給 Service 進行業務邏輯處理。如果有必要，Service 會對資料進行進一步處理，最後將結果交給 Controller，準備封包為前端所需的格式。
比喻：就像是 Model 把信件轉交給後端的腦袋（Service），Service 根據需求進行調整，再交給 Controller 進行封包，準備回傳給前端。

流程圖：
Model → Service → Controller

3. 資料回傳前端：Controller → Route → Vue
過程描述：
Controller 將資料封包成前端格式，並通過 Route 回傳給 Vue 顯示。
比喻：資料就像是被封包好的信件，經過 Route 送回前端的 Vue，最終呈現給使用者。

流程圖：
Controller → Route → Vue

三、為何要分層？
維護性：
每層各自負責不同的職責，修改其中一層不會影響到其他層，增強了維護的便捷性。

清晰度：
分層能讓資料流向與格式轉換變得清晰，開發人員能夠直觀理解每一層的功能和責任。

彈性：
當資料結構或資料庫改變時，只需要調整相對應的層次，減少整體系統的調整成本。

四、DTO (Data Transfer Object)
在一些情況下，尤其是當資料需要經過多個層級處理時，我們會引入 DTO 來作為資料的容器。

DTO 的作用：
DTO 是用來準備資料的工具，它只在資料處理層（如 Controller 或 Service）中需要使用。
它能夠保持資料的乾淨與結構化，避免各層間的資料格式混亂。

DTO 流程簡述：

Route → Controller（將請求資料轉換成 DTO）

Controller → Service（傳遞 DTO）

Service → Model（可能會使用 DTO 進行格式轉換）

Model → DAO（DAO 執行 SQL 操作，接受乾淨的資料）

五、資料角色與比喻總結
層級	角色	職責說明	比喻
Vue	使用者前端	提供表單，收集並輸入資料	「門外的信件」
Route	路由	接收前端請求，將請求轉發給對應的 Controller	「郵局櫃檯，收取信件並分發」
Controller (CON)	前後端中介	解包前端資料，封包後端回應資料	「翻譯官，拆信與包信」
Service (SER)	後端邏輯大腦	處理業務邏輯，決定如何處理資料	「大腦，決定信件怎麼處理」
Model (MOD)	後端與資料庫中介	負責資料格式轉換（後端資料 ? 資料庫資料）	「翻譯官，將信件轉成資料庫格式」
DAO	資料庫操作執行者	執行 SQL 操作，與資料庫交互	「司機，把信送到資料庫」
Database (DB)	資料庫	儲存資料	「信箱，存放信件」

這